name: UrlShortner

trigger: none # Can be configured for CI/CD triggers as needed
pr: none

variables: # Pipeline-level variables
  - group: HIREKO
  - name: DOCKER_IMAGE
    value: "docker.io/lookforlohith/metricdust_ado_deployment_docker:latest"

parameters:
  - name: profile_name
    type: string
    displayName: "Profile Name"
    default: "hireko"
    # description: "Profile name for configuration (e.g., AWS profile)."

stages:
- stage: DeployAndTestBeta
  displayName: 'Deploy and Test Beta'
  jobs:
  - job: betaDeploymentJob
    displayName: 'Deploy to Beta and Test'
    pool:
      vmImage: 'ubuntu-latest'
    container:
      image: ${{ variables.DOCKER_IMAGE }}
      options: --platform linux/amd64
    variables:
      PARAM_PROFILE_NAME: ${{ parameters.profile_name }}
      BETA_AWS_REGION: 'us-west-2'
    steps:
      - checkout: self
        fetchDepth: "0"
        clean: "true"
        path: 's/$(Build.Repository.Name)'
        displayName: 'Checkout Default/Triggering Ref'
      
      - bash: |
          set -e
          set -x
          
          echo "################################### STEP 0: Directory Check #################################################"
          ls -la
          pwd
          
          if [[ $(pwd) != */"$REPOSITORY_NAME" ]]; then
            echo "Error: Not in $REPOSITORY_NAME directory"
            exit 1
          fi
        displayName: 'Step 0: Directory Check (Beta)'
        env:
          REPOSITORY_NAME: "$(Build.Repository.Name)"
      
      - bash: |
          set -e
          set -x
          
          echo "################################### PART 1 #################################################"
          
          export AWS_ACCESS_KEY_ID=$(HIREKO_BETA_AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(HIREKO_BETA_AWS_SECRET_ACCESS_KEY)

          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            exit 1
          fi
          # Export full ADO variable names as well
          export HIREKO_BETA_AWS_ACCESS_KEY_ID=$(HIREKO_BETA_AWS_ACCESS_KEY_ID)
          export HIREKO_BETA_AWS_SECRET_ACCESS_KEY=$(HIREKO_BETA_AWS_SECRET_ACCESS_KEY)
          echo "Environment variables set for Beta."

          echo "################################### PART 3 #################################################"
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile "$PARAM_PROFILE_NAME"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile "$PARAM_PROFILE_NAME"
          aws configure set region "$BETA_AWS_REGION_CONFIG_ENV" --profile "$PARAM_PROFILE_NAME"
          aws configure set output "json" --profile "$PARAM_PROFILE_NAME"
          aws sts get-caller-identity --profile "$PARAM_PROFILE_NAME" > /dev/null

          echo "################################### PART 4 #################################################"
          chmod +x z_setup_deploy_beta.sh
          ./z_setup_deploy_beta.sh

          echo "Successfully deployed commit $(Build.SourceVersion) to Beta."
          echo "##vso[task.setvariable variable=BETA_DEPLOYED_SHA;isOutput=true]$(Build.SourceVersion)"

        name: deployBetaScript
        displayName: 'AWS & Deploy (Beta)'
        env:
          PARAM_PROFILE_NAME: "$(PARAM_PROFILE_NAME)"
          BETA_AWS_REGION_CONFIG_ENV: "$(BETA_AWS_REGION)"
          REPOSITORY_NAME: "$(Build.Repository.Name)"

- stage: DeployToProd
  displayName: 'Deploy to Production'
  dependsOn: DeployAndTestBeta
  condition: succeeded('DeployAndTestBeta')
  variables:
    # Define TARGET_PROD_COMMIT_SHA to receive output from Beta stage
    TARGET_PROD_COMMIT_SHA: $[ stageDependencies.DeployAndTestBeta.betaDeploymentJob.outputs['deployBetaScript.BETA_DEPLOYED_SHA'] ]
  jobs:
  - deployment: ProductionDeployment
    displayName: 'Deploy to Production Environment (from main branch)'
    pool:
      vmImage: 'ubuntu-latest'
    container:
      image: ${{ variables.DOCKER_IMAGE }}
      options: --platform linux/amd64
    environment:
      name: 'prod'
      # This environment should be configured in Azure DevOps with approval checks
    variables:
      PARAM_PROFILE_NAME: ${{ parameters.profile_name }}
      PROD_AWS_REGION: 'us-west-1'
    strategy:
      runOnce:
        deploy:
          steps:
            - bash: |
                if [[ -z "${TARGET_PROD_COMMIT_SHA}" ]]; then
                  echo "[ERROR] TARGET_PROD_COMMIT_SHA is not set. Cannot proceed."
                  exit 1
                fi

                # Remove any accidental quotes
                TARGET_PROD_COMMIT_SHA="${TARGET_PROD_COMMIT_SHA//\'/}"
                
                echo "Production deployment will use the latest 'main' branch."
                echo "Target commit SHA for Production: $(TARGET_PROD_COMMIT_SHA)"
              displayName: 'Confirm Prod Source (main branch)'

            - checkout: self
              fetchDepth: "0"
              clean: "true"
              path: 's/$(Build.Repository.Name)'
              displayName: 'Initial Checkout for Prod Job'
              
            - bash: |
                set -e
                set -x
                
                echo "################################### STEP 0: Directory Check #################################################"
                ls -la
                pwd
                
                if [[ $(pwd) != */"$REPOSITORY_NAME" ]]; then
                  echo "Error: Not in $REPOSITORY_NAME directory"
                  exit 1
                fi
              displayName: 'Step 0: Directory Check (Prod)'
              env:
                REPOSITORY_NAME: "$(Build.Repository.Name)"
            
            - bash: |
                set -e # Keep exit on error
                
                # Remove any accidental quotes from the variable
                TARGET_COMMIT_CLEAN="${TARGET_PROD_COMMIT_SHA//\'/}"
                TARGET_COMMIT_CLEAN="${TARGET_COMMIT_CLEAN//\"/}"
                
                echo "Target commit SHA for Production: $TARGET_COMMIT_CLEAN"
                if [ -z "$TARGET_COMMIT_CLEAN" ]; then
                  echo "[ERROR] TARGET_PROD_COMMIT_SHA is not set. Cannot proceed."
                  exit 1
                fi

                # Remove any accidental quotes and assign to variable
                PROD_COMMIT_SHA="$(TARGET_PROD_COMMIT_SHA)"
                PROD_COMMIT_SHA="${PROD_COMMIT_SHA//\'}"
                PROD_COMMIT_SHA="${PROD_COMMIT_SHA//\"}"
                
                echo "Checking out target commit for Production: $PROD_COMMIT_SHA"
                git checkout "$PROD_COMMIT_SHA"
                echo "Successfully checked out commit $PROD_COMMIT_SHA for Production."
                echo "##vso[task.setvariable variable=PROD_COMMIT_SHA]$PROD_COMMIT_SHA"
              displayName: 'Checkout Target Commit for Production'

            - bash: |
                echo "Deploying commit $(PROD_COMMIT_SHA) from 'main' branch to Production after approval"
              displayName: 'Display Commit SHA for Prod (from main)'

            # Merged script task for Production
            - bash: |
                set -e
                set -x

                echo "################################### Setting up Environment Variables (Prod) #################################################"
                export AWS_ACCESS_KEY_ID=$(HIREKO_PROD_AWS_ACCESS_KEY_ID)
                export AWS_SECRET_ACCESS_KEY=$(HIREKO_PROD_AWS_SECRET_ACCESS_KEY)

                if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                  echo "[ERROR] Critical AWS credentials not set for Prod. Exiting."
                  exit 1
                fi
                # Export full ADO variable names as well
                export HIREKO_PROD_AWS_ACCESS_KEY_ID=$(HIREKO_PROD_AWS_ACCESS_KEY_ID)
                export HIREKO_PROD_AWS_SECRET_ACCESS_KEY=$(HIREKO_PROD_AWS_SECRET_ACCESS_KEY)
                echo "Environment variables set for Prod."

                echo "################################### PART 3 #################################################"
                aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile "$PARAM_PROFILE_NAME"
                aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile "$PARAM_PROFILE_NAME"
                aws configure set region "$PROD_AWS_REGION_CONFIG_ENV" --profile "$PARAM_PROFILE_NAME"
                aws configure set output "json" --profile "$PARAM_PROFILE_NAME"
                aws sts get-caller-identity --profile "$PARAM_PROFILE_NAME" > /dev/null

                echo "################################### PART 4 #################################################"
                chmod +x z_setup_deploy_prod.sh
                ./z_setup_deploy_prod.sh

              displayName: 'AWS & Deploy (Prod)'
              env:
                PARAM_PROFILE_NAME: "$(PARAM_PROFILE_NAME)"
                PROD_AWS_REGION_CONFIG_ENV: "$(PROD_AWS_REGION)"
                REPOSITORY_NAME: "$(Build.Repository.Name)"
